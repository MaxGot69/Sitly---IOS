import Foundation
import SwiftUI
import CoreLocation

// MARK: - Dependency Container

final class DependencyContainer: ObservableObject {
    static let shared = DependencyContainer()
    
    // MARK: - Services
    lazy var networkService: NetworkServiceProtocol = NetworkService()
    lazy var storageService: StorageServiceProtocol = StorageService()
    lazy var locationService: LocationServiceProtocol = LocationService()
    lazy var cacheService: CacheServiceProtocol = {
        let service = CacheService(storageService: storageService)
        return service
    }()
    
    // MARK: - Repositories
    lazy var restaurantRepository: RestaurantRepositoryProtocol = RestaurantRepository(
        networkService: networkService,
        storageService: storageService,
        cacheService: cacheService
    )
    
    lazy var bookingRepository: BookingRepositoryProtocol = BookingRepository(
        networkService: networkService,
        storageService: storageService
    )
    
    lazy var userRepository: UserRepositoryProtocol = UserRepository(
        networkService: networkService,
        storageService: storageService
    )
    
    lazy var reviewRepository: ReviewRepositoryProtocol = ReviewRepository(
        networkService: networkService,
        storageService: storageService
    )
    
    // MARK: - Use Cases
    lazy var restaurantUseCase: RestaurantUseCaseProtocol = RestaurantUseCase(
        repository: restaurantRepository,
        locationService: locationService
    )
    
    lazy var locationUseCase: LocationUseCaseProtocol = LocationUseCase(
        locationService: locationService,
        restaurantRepository: restaurantRepository
    )
    
    lazy var bookingUseCase: BookingUseCaseProtocol = BookingUseCase(
        repository: bookingRepository,
        restaurantRepository: restaurantRepository
    )
    
    lazy var userUseCase: UserUseCaseProtocol = UserUseCase(
        repository: userRepository,
        storageService: storageService
    )
    
    lazy var reviewUseCase: ReviewUseCaseProtocol = ReviewUseCase(
        repository: reviewRepository,
        restaurantRepository: restaurantRepository
    )
    
    private init() {}
}

// MARK: - SwiftUI Environment Key

struct DependencyContainerKey: EnvironmentKey {
    static let defaultValue: DependencyContainer = DependencyContainer.shared
}

extension EnvironmentValues {
    var dependencyContainer: DependencyContainer {
        get { self[DependencyContainerKey.self] }
        set { self[DependencyContainerKey.self] = newValue }
    }
}

// MARK: - View Extensions

extension View {
    func injectDependencies() -> some View {
        self.environment(\.dependencyContainer, DependencyContainer.shared)
    }
}

// MARK: - App Configuration

extension DependencyContainer {
    func configure() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç.–¥.
        
        print("üöÄ Sitly App - Dependency Container configured successfully!")
        print("üì± Services: Network, Storage, Location")
        print("üóÑÔ∏è Repositories: Restaurant, Booking, User, Review")
        print("üíº Use Cases: Restaurant, Booking, User, Review")
    }
}

// MARK: - Mock Data Provider (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

final class MockDataProvider {
    static let shared = MockDataProvider()
    
    private init() {}
    
    func getMockRestaurants() -> [Restaurant] {
        return [
            Restaurant(
                id: "pushkin-1",
                name: "Pushkin",
                description: "–≠—Ç–æ –∫—É–ª—å—Ç–æ–≤–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–≤–æ–∏–º —Ä–æ—Å–∫–æ—à–Ω—ã–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –≤ —Å—Ç–∏–ª–µ –¥–≤–æ—Ä—è–Ω—Å–∫–æ–π —É—Å–∞–¥—å–±—ã XIX –≤–µ–∫–∞ –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–µ–π.",
                cuisineType: .russian,
                address: "–¢–≤–µ—Ä—Å–∫–æ–π –±—É–ª., 26–ê, –ú–æ—Å–∫–≤–∞",
                coordinates: CLLocationCoordinate2D(latitude: 55.7652, longitude: 37.6041),
                phoneNumber: "+7 (495) 123-45-67",
                ownerId: "owner-1"
            ),
            Restaurant(
                id: "tver-1",
                name: "–¢–≤–µ—Ä—å",
                description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫—É—Ö–Ω—è –∏ —É—é—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ —Å—Ç–æ–ª–∏—Ü—ã.",
                cuisineType: .european,
                address: "–¢–≤–µ—Ä—Å–∫–æ–π –±—É–ª., 26–ê, –ú–æ—Å–∫–≤–∞",
                coordinates: CLLocationCoordinate2D(latitude: 55.7652, longitude: 37.6041),
                phoneNumber: "+7 (495) 123-45-68",
                ownerId: "owner-2"
            ),
            Restaurant(
                id: "sibir-1",
                name: "–°–∏–±–∏—Ä—å–°–∏–±–∏—Ä—å",
                description: "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ —Å —Å–∏–±–∏—Ä—Å–∫–∏–º –¥—É—Ö–æ–º –∏ –∫—É—Ö–Ω–µ–π —Å–µ–≤–µ—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.",
                cuisineType: .russian,
                address: "–°–∞–¥–æ–≤–∞—è-–°–∞–º–æ—Ç–µ—á–Ω–∞—è, 20, –ú–æ—Å–∫–≤–∞",
                coordinates: CLLocationCoordinate2D(latitude: 55.7756, longitude: 37.6216),
                phoneNumber: "+7 (495) 123-45-69",
                ownerId: "owner-3"
            ),
            Restaurant(
                id: "white-rabbit-1",
                name: "White Rabbit",
                description: "–†–µ—Å—Ç–æ—Ä–∞–Ω —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –ú–æ—Å–∫–≤—É –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–π.",
                cuisineType: .european,
                address: "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –ø–ª., 3, –ú–æ—Å–∫–≤–∞",
                coordinates: CLLocationCoordinate2D(latitude: 55.7488, longitude: 37.5847),
                phoneNumber: "+7 (495) 123-45-70",
                ownerId: "owner-4"
            ),
            Restaurant(
                id: "dr-zhivago-1",
                name: "Dr. –ñ–∏–≤–∞–≥–æ",
                description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–¥–∞–Ω–∏–∏.",
                cuisineType: .russian,
                address: "–ú–æ—Ö–æ–≤–∞—è —É–ª., 15/1, –ú–æ—Å–∫–≤–∞",
                coordinates: CLLocationCoordinate2D(latitude: 55.7520, longitude: 37.6175),
                phoneNumber: "+7 (495) 123-45-71",
                ownerId: "owner-5"
            )
        ]
    }
    
    func getMockUser() -> User {
        return User(
            id: "user-1",
            email: "user@example.com",
            name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            phoneNumber: "+7 (999) 123-45-67"
        )
    }
    
    func getMockBookings() -> [Booking] {
        return [
            Booking(
                restaurantId: "demo-restaurant",
                clientId: "client1",
                tableId: "table1",
                date: Date().addingTimeInterval(86400),
                timeSlot: "19:00-21:00",
                guests: 2,
                status: .pending,
                specialRequests: "–°—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞",
                totalPrice: 2500.0,
                paymentStatus: .unpaid,
                clientName: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
                clientPhone: "+7 (999) 123-45-67",
                clientEmail: "anna@example.com",
                tableName: "–°—Ç–æ–ª 1",
                tableCapacity: 2,
                createdAt: Date(),
                updatedAt: Date()
            ),
            Booking(
                restaurantId: "demo-restaurant",
                clientId: "client2",
                tableId: "table2",
                date: Date().addingTimeInterval(172800),
                timeSlot: "20:00-22:00",
                guests: 4,
                status: .confirmed,
                specialRequests: "VIP-—Å—Ç–æ–ª–∏–∫",
                totalPrice: 5000.0,
                paymentStatus: .paid,
                clientName: "–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤",
                clientPhone: "+7 (999) 987-65-43",
                clientEmail: "mikhail@example.com",
                tableName: "VIP-1",
                tableCapacity: 6,
                createdAt: Date(),
                updatedAt: Date()
            )
        ]
    }
    
    func getMockReviews() -> [Review] {
        return [
            Review(
                restaurantId: "restaurant-1", // ID –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                userId: "user-1",
                userName: "–ê–ª–µ–∫—Å–µ–π",
                rating: 4.5,
                text: "–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω! –û—á–µ–Ω—å –≤–∫—É—Å–Ω–∞—è –µ–¥–∞ –∏ –ø—Ä–∏—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞."
            ),
            Review(
                restaurantId: "restaurant-1", // ID –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                userId: "user-1",
                userName: "–ú–∞—Ä–∏—è",
                rating: 4.8,
                text: "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã—Å–æ—Ç–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º!"
            ),
            Review(
                restaurantId: "restaurant-1", // ID –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                userId: "user-1",
                userName: "–î–º–∏—Ç—Ä–∏–π",
                rating: 4.3,
                text: "–•–æ—Ä–æ—à–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ."
            )
        ]
    }
}

// MARK: - Error Handling

extension DependencyContainer {
    func handleError(_ error: Error) {
        // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        print("‚ùå Error occurred: \(error.localizedDescription)")
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
        // - –û—Ç–ø—Ä–∞–≤–∫—É –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (Crashlytics, Firebase Analytics)
        // - –ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        // - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    }
}

// MARK: - Mock User Use Case

private class MockUserUseCase: UserUseCaseProtocol {
    func login(email: String, password: String, rememberMe: Bool) async throws -> Bool { return true }
    func loginWithApple() async throws -> Bool { return true }
    func loginWithGoogle() async throws -> Bool { return true }
    func register(email: String, password: String, name: String) async throws -> Bool { return true }
    func registerWithRole(email: String, password: String, name: String, role: UserRole) async throws -> User {
        return User(
            id: "demo-user-id",
            email: email,
            name: name,
            role: role,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: UserPreferences(),
            favoriteRestaurants: []
        )
    }
    func sendPasswordResetEmail(email: String) async throws -> Bool { return true }
    func logout() async throws { }
    func validateSession() async throws -> Bool { return false }
    func authenticateWithBiometrics() async throws -> Bool { return false }
    func getUserProfile() async throws -> User { 
        User(
            id: "demo-user-id", 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    func updateUserProfile(_ user: User) async throws -> User { return user }
    func updateUserPreferences(_ preferences: UserPreferences) async throws -> User { 
        User(
            id: "demo-user-id", 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: preferences,
            favoriteRestaurants: nil
        )
    }
    func setRememberMe(_ enabled: Bool) async throws { }
    
    // MARK: - Repository Methods (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    func registerUser(email: String, password: String, name: String) async throws -> User {
        return User(
            id: "new-user-id", 
            email: email, 
            name: name,
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func authenticateUser(email: String, password: String) async throws -> User {
        return User(
            id: "auth-user-id", 
            email: email, 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func getUser(id: UUID) async throws -> User {
        return User(
            id: id.uuidString, 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func updateUser(_ user: User) async throws -> User {
        return user
    }
    
    func deleteUser(id: UUID) async throws {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è MVP
    }
}

// AppState moved to separate file 