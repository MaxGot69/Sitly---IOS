import Foundation
import SwiftUI
import Firebase
import FirebaseAuth

final class AppState: ObservableObject {
    // MARK: - Published Properties
    @Published var isAuthenticated = false
    @Published var currentUser: User?
    @Published var isLoading = false
    @Published var showOnboarding = false
    @Published var hasCompletedOnboarding = false
    @Published var authToken: String?
    @Published var refreshToken: String?
    
    // MARK: - Private Properties
    private let userUseCase: UserUseCaseProtocol
    private let storageService: StorageServiceProtocol
    private let auth = Auth.auth()
    
    // MARK: - Private Methods for Storage
    private func loadStoredData() async {
        do {
            let onboardingStatus = (try await storageService.load(Bool.self, forKey: "hasCompletedOnboarding")) ?? false
            let authTokenValue = try await storageService.load(String.self, forKey: "authToken")
            let refreshTokenValue = try await storageService.load(String.self, forKey: "refreshToken")
            
            await MainActor.run {
                hasCompletedOnboarding = onboardingStatus
                authToken = authTokenValue
                refreshToken = refreshTokenValue
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: \(error)")
        }
    }
    
    private func saveOnboardingStatus(_ completed: Bool) async {
        do {
            try await storageService.save(completed, forKey: "hasCompletedOnboarding")
            await MainActor.run {
                hasCompletedOnboarding = completed
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞: \(error)")
        }
    }
    
    private func saveAuthToken(_ token: String?) async {
        do {
            if let token = token {
                try await storageService.save(token, forKey: "authToken")
                await MainActor.run {
                    authToken = token
                }
            } else {
                try await storageService.delete(forKey: "authToken")
                await MainActor.run {
                    authToken = nil
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: \(error)")
        }
    }
    
    private func saveRefreshToken(_ token: String?) async {
        do {
            if let token = token {
                try await storageService.save(token, forKey: "refreshToken")
                await MainActor.run {
                    refreshToken = token
                }
            } else {
                try await storageService.delete(forKey: "refreshToken")
                await MainActor.run {
                    refreshToken = nil
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–∞: \(error)")
        }
    }
    
    // MARK: - Initialization
    init(userUseCase: UserUseCaseProtocol, storageService: StorageServiceProtocol) {
        self.userUseCase = userUseCase
        self.storageService = storageService
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        setupAuthStateListener()
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        Task {
            await loadStoredData()
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        print("üî• Firebase: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        print("üî• Firebase Auth: \(Auth.auth().app?.name ?? "–ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù")")
        print("üî• Firebase Firestore: \(Firestore.firestore().app.name)")
        checkAuthenticationStatus()
    }
    
    // MARK: - Public Methods
    
    func checkAuthenticationStatus() {
        print("üîç AppState: checkAuthenticationStatus –≤—ã–∑–≤–∞–Ω")
        Task { @MainActor in
            self.isLoading = true
        }
        
        Task {
            do {
                print("üîç AppState: –ü—Ä–æ–≤–µ—Ä—è–µ–º Firebase Auth...")
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è Firebase Auth
                if Auth.auth().currentUser != nil {
                    print("‚úÖ AppState: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: \(Auth.auth().currentUser?.uid ?? "–ù–ï–¢ UID")")
                    // –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    let user = try await userUseCase.getUserProfile()
                    await MainActor.run {
                        self.currentUser = user
                        self.isAuthenticated = true
                    }
                } else {
                    print("‚ùå AppState: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
                    // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
                    await MainActor.run {
                        self.isAuthenticated = false
                        self.currentUser = nil
                    }
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: \(error)")
                await MainActor.run {
                    clearAuthData()
                    self.isAuthenticated = false
                }
            }
            
            await MainActor.run {
                self.isLoading = false
            }
        }
    }
    
    func login(email: String, password: String, rememberMe: Bool) async throws -> Bool {
        await MainActor.run {
            self.isLoading = true
        }
        
        do {
            let success = try await userUseCase.login(
                email: email,
                password: password,
                rememberMe: rememberMe
            )
            
            if success {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                let user = try await userUseCase.getUserProfile()
                await MainActor.run {
                    self.currentUser = user
                    self.isAuthenticated = true
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                DependencyContainer.shared.setCurrentUser(
                    id: currentUser?.id,
                    email: email
                )
                
                return true
            } else {
                return false
            }
        } catch {
            isLoading = false
            throw error
        }
    }
    
    func register(email: String, password: String, name: String) async throws -> Bool {
        await MainActor.run {
            self.isLoading = true
        }
        
        do {
            let success = try await userUseCase.register(
                email: email,
                password: password,
                name: name
            )
            
            if success {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                return try await login(email: email, password: password, rememberMe: false)
            } else {
                await MainActor.run {
                    self.isLoading = false
                }
                return false
            }
        } catch {
            await MainActor.run {
                self.isLoading = false
            }
            throw error
        }
    }
    
    // MARK: - Registration with Role
    func register(email: String, password: String, name: String, role: UserRole) async throws {
        await MainActor.run {
            self.isLoading = true
        }
        
        do {
            let user = try await userUseCase.registerWithRole(
                email: email,
                password: password,
                name: name,
                role: role
            )
            
            await MainActor.run {
                self.currentUser = user
                self.isAuthenticated = true
                self.isLoading = false
            }
        } catch {
            await MainActor.run {
                self.isLoading = false
            }
            throw error
        }
    }
    
    func logout() {
        Task {
            do {
                // –í—ã—Ö–æ–¥–∏–º –∏–∑ Firebase Auth
                try Auth.auth().signOut()
                try await userUseCase.logout()
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: \(error)")
            }
            
            await MainActor.run {
                clearAuthData()
                self.isAuthenticated = false
                self.currentUser = nil
            }
        }
    }
    
    func completeOnboarding() {
        Task {
            await saveOnboardingStatus(true)
            await MainActor.run {
                showOnboarding = false
            }
        }
    }
    
    // MARK: - Private Methods
    
    private func setupAuthStateListener() {
        // –î–ª—è MVP –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º Firebase Auth listener
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("üîê Firebase Auth listener –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è MVP –≤–µ—Ä—Å–∏–∏")
    }
    
    private func loadUserProfile(userId: String) {
        Task {
            do {
                let user = try await userUseCase.getUserProfile()
                await MainActor.run {
                    self.currentUser = user
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: \(error)")
            }
        }
    }
    
    private func clearAuthData() {
        Task {
            await saveAuthToken(nil)
            await saveRefreshToken(nil)
            await MainActor.run {
                currentUser = nil
            }
        }
    }
    
    // MARK: - Refresh Methods
    func refreshUser() {
        if let userId = currentUser?.id {
            loadUserProfile(userId: userId)
        }
    }
}

// MARK: - App State Environment Key

struct AppStateKey: EnvironmentKey {
    static let defaultValue: AppState = {
        let container = DependencyContainer.shared
        return AppState(
            userUseCase: container.userUseCase,
            storageService: container.storageService
        )
    }()
}

extension EnvironmentValues {
    var appState: AppState {
        get { self[AppStateKey.self] }
        set { self[AppStateKey.self] = newValue }
    }
}

// MARK: - Mock User Use Case

private class MockUserUseCase: UserUseCaseProtocol {
    func login(email: String, password: String, rememberMe: Bool) async throws -> Bool { return true }
    func loginWithApple() async throws -> Bool { return true }
    func loginWithGoogle() async throws -> Bool { return true }
    func register(email: String, password: String, name: String) async throws -> Bool { return true }
    func registerWithRole(email: String, password: String, name: String, role: UserRole) async throws -> User {
        return User(
            id: "demo-user-id",
            email: email,
            name: name,
            role: role,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: UserPreferences(),
            favoriteRestaurants: []
        )
    }
    func sendPasswordResetEmail(email: String) async throws -> Bool { return true }
    func logout() async throws { }
    func validateSession() async throws -> Bool { return false }
    func authenticateWithBiometrics() async throws -> Bool { return false }
    func getUserProfile() async throws -> User { 
        User(
            id: "demo-user-id", 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    func updateUserProfile(_ user: User) async throws -> User { return user }
    func updateUserPreferences(_ preferences: UserPreferences) async throws -> User { 
        User(
            id: "demo-user-id", 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: preferences,
            favoriteRestaurants: nil
        )
    }
    func setRememberMe(_ enabled: Bool) async throws { }
    
    // MARK: - Repository Methods (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    func registerUser(email: String, password: String, name: String) async throws -> User {
        return User(
            id: "new-user-id", 
            email: email, 
            name: name,
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func authenticateUser(email: String, password: String) async throws -> User {
        return User(
            id: "auth-user-id", 
            email: email, 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func getUser(id: UUID) async throws -> User {
        return User(
            id: id.uuidString, 
            email: "demo@example.com", 
            name: "Demo User",
            role: .client,
            phoneNumber: nil,
            profileImageURL: nil,
            createdAt: Date(),
            lastLoginAt: Date(),
            restaurantId: nil,
            isVerified: false,
            subscriptionPlan: nil,
            preferences: nil,
            favoriteRestaurants: nil
        )
    }
    
    func updateUser(_ user: User) async throws -> User {
        return user
    }
    
    func deleteUser(id: UUID) async throws { }
}
