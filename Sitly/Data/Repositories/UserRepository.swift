import Foundation
import Firebase
import FirebaseAuth
import FirebaseFirestore

// MARK: - User Repository Implementation

final class UserRepository: UserRepositoryProtocol {
    private let networkService: NetworkServiceProtocol
    private let storageService: StorageServiceProtocol
    private let auth = Auth.auth()
    private let db = Firestore.firestore()
    
    init(networkService: NetworkServiceProtocol, storageService: StorageServiceProtocol) {
        self.networkService = networkService
        self.storageService = storageService
    }
    
    // MARK: - Public Methods
    
    func createUser(_ user: User) async throws -> User {
        do {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
            print("üìù –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            let userData = try JSONEncoder().encode(user)
            let userDict = try JSONSerialization.jsonObject(with: userData) as? [String: Any] ?? [:]
            
            var firestoreData = userDict
            firestoreData.removeValue(forKey: "id")
            
            print("üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore: users/\(user.id)")
            print("üìù –î–∞–Ω–Ω—ã–µ: \(firestoreData)")
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try await db.collection("users").document(user.id).setData(firestoreData)
            
            print("üìù –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore!")
            return user
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ Firestore: \(error)")
            throw error
        }
    }
    
    func fetchUser(by id: UUID) async throws -> User {
        let document = try await db.collection("users").document(id.uuidString).getDocument()
        guard let data = document.data() else {
            throw RepositoryError.notFound
        }
        
        var userData = data
        userData["id"] = document.documentID
        
        let jsonData = try JSONSerialization.data(withJSONObject: userData)
        return try JSONDecoder().decode(User.self, from: jsonData)
    }
    
    func updateUser(_ user: User) async throws -> User {
        let userData = try JSONEncoder().encode(user)
        let userDict = try JSONSerialization.jsonObject(with: userData) as? [String: Any] ?? [:]
        
        var firestoreData = userDict
        firestoreData.removeValue(forKey: "id")
        
        try await db.collection("users").document(user.id).setData(firestoreData, merge: true)
        
        return user
    }
    
    func deleteUser(id: UUID) async throws {
        try await db.collection("users").document(id.uuidString).delete()
    }
    
    func authenticateUser(email: String, password: String) async throws -> User {
        do {
            let result = try await auth.signIn(withEmail: email, password: password)
            let firebaseUser = result.user
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore
            let document = try await db.collection("users").document(firebaseUser.uid).getDocument()
            
            if let data = document.data() {
                var userData = data
                userData["id"] = document.documentID
                userData["lastLoginAt"] = Date()
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
                try await db.collection("users").document(firebaseUser.uid).updateData([
                    "lastLoginAt": Timestamp(date: Date())
                ])
                
                let jsonData = try JSONSerialization.data(withJSONObject: userData)
                let user = try JSONDecoder().decode(User.self, from: jsonData)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                try storageService.save(user, forKey: "currentUser")
                
                return user
            } else {
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ email
                let userRole: UserRole = email.contains("admin") ? .restaurant : .client
                let user = User(
                    id: firebaseUser.uid,
                    email: email,
                    name: firebaseUser.displayName ?? (userRole == .restaurant ? "–†–µ—Å—Ç–æ—Ä–∞–Ω" : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                    role: userRole,
                    phoneNumber: firebaseUser.phoneNumber,
                    profileImageURL: firebaseUser.photoURL?.absoluteString,
                    createdAt: Date(),
                    lastLoginAt: Date(),
                    restaurantId: nil,
                    isVerified: firebaseUser.isEmailVerified,
                    subscriptionPlan: nil,
                    preferences: UserPreferences(),
                    favoriteRestaurants: []
                )
                
                let createdUser = try await createUser(user)
                try storageService.save(createdUser, forKey: "currentUser")
                return createdUser
            }
        } catch let error as NSError {
            // –ö—Ä–∞—Å–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Firebase Auth
            switch error.code {
            case AuthErrorCode.userNotFound.rawValue:
                throw RepositoryError.authenticationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email.")
            case AuthErrorCode.wrongPassword.rawValue:
                throw RepositoryError.authenticationError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            case AuthErrorCode.invalidEmail.rawValue:
                throw RepositoryError.authenticationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.")
            case AuthErrorCode.userDisabled.rawValue:
                throw RepositoryError.authenticationError("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            case AuthErrorCode.tooManyRequests.rawValue:
                throw RepositoryError.authenticationError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            case AuthErrorCode.networkError.rawValue:
                throw RepositoryError.networkError(error)
            default:
                throw RepositoryError.authenticationError("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: \(error.localizedDescription)")
            }
        }
    }
    
    func registerUser(email: String, password: String, name: String) async throws -> User {
        do {
            let result = try await auth.createUser(withEmail: email, password: password)
            let firebaseUser = result.user
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å Firebase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let changeRequest = firebaseUser.createProfileChangeRequest()
            changeRequest.displayName = name
            try await changeRequest.commitChanges()
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = User(
                id: firebaseUser.uid,
                email: email,
                name: name,
                role: .client,
                phoneNumber: nil,
                profileImageURL: nil,
                createdAt: Date(),
                lastLoginAt: Date(),
                restaurantId: nil,
                isVerified: false,
                subscriptionPlan: nil,
                preferences: UserPreferences(),
                favoriteRestaurants: []
            )
            
            let createdUser = try await createUser(user)
            try storageService.save(createdUser, forKey: "currentUser")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            try await firebaseUser.sendEmailVerification()
            
            return createdUser
        } catch let error as NSError {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            switch error.code {
            case AuthErrorCode.emailAlreadyInUse.rawValue:
                throw RepositoryError.authenticationError("–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.")
            case AuthErrorCode.weakPassword.rawValue:
                throw RepositoryError.authenticationError("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
            case AuthErrorCode.invalidEmail.rawValue:
                throw RepositoryError.authenticationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.")
            case AuthErrorCode.networkError.rawValue:
                throw RepositoryError.networkError(error)
            default:
                throw RepositoryError.authenticationError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
            }
        }
    }
    
    func registerUserWithRole(email: String, password: String, name: String, role: UserRole) async throws -> User {
        do {
            let result = try await auth.createUser(withEmail: email, password: password)
            let firebaseUser = result.user
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å Firebase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let changeRequest = firebaseUser.createProfileChangeRequest()
            changeRequest.displayName = name
            try await changeRequest.commitChanges()
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
            let user = User(
                id: firebaseUser.uid,
                email: email,
                name: name,
                role: role, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ä–æ–ª—å
                phoneNumber: nil,
                profileImageURL: nil,
                createdAt: Date(),
                lastLoginAt: Date(),
                restaurantId: nil,
                isVerified: false,
                subscriptionPlan: nil,
                preferences: UserPreferences(),
                favoriteRestaurants: []
            )
            
            print("‚úÖ Firebase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: \(firebaseUser.uid)")
            print("‚úÖ –°–æ–∑–¥–∞–µ–º Firestore –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            do {
                let createdUser = try await createUser(user)
                print("‚úÖ Firestore –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
                
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")
                try storageService.save(createdUser, forKey: "currentUser")
                
                print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return createdUser
            } catch {
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ Firestore (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º): \(error)")
                print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ...")
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ Firestore –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try storageService.save(user, forKey: "currentUser")
                
                print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–±–µ–∑ Firestore)!")
                return user
            }
        } catch let error as NSError {
            // –ö—Ä–∞—Å–∏–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Firebase Auth
            switch error.code {
            case AuthErrorCode.emailAlreadyInUse.rawValue:
                throw RepositoryError.authenticationError("–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.")
            case AuthErrorCode.invalidEmail.rawValue:
                throw RepositoryError.authenticationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞.")
            case AuthErrorCode.weakPassword.rawValue:
                throw RepositoryError.authenticationError("–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.")
            case AuthErrorCode.networkError.rawValue:
                throw RepositoryError.networkError(error)
            default:
                throw RepositoryError.authenticationError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: \(error.localizedDescription)")
            }
        }
    }
}


