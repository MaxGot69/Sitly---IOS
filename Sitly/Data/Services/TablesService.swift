//
//  TablesService.swift
//  Sitly
//
//  Created by AI Assistant on 12.09.2025.
//

import Foundation
import FirebaseFirestore
import Combine

protocol TablesServiceProtocol {
    func fetchTables(for restaurantId: String) async throws -> [TableModel]
    func createTable(_ table: TableModel, for restaurantId: String) async throws -> TableModel
    func updateTable(_ table: TableModel, for restaurantId: String) async throws
    func deleteTable(_ table: TableModel, for restaurantId: String) async throws
    func updateTableStatus(_ tableId: String, status: TableModel.TableStatusType, for restaurantId: String) async throws
    func observeTables(for restaurantId: String) -> AnyPublisher<[TableModel], Error>
}

class TablesService: TablesServiceProtocol {
    private let db = Firestore.firestore()
    private var listeners: [String: ListenerRegistration] = [:]
    
    // MARK: - Fetch Tables
    func fetchTables(for restaurantId: String) async throws -> [TableModel] {
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ª–∏–∫–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: \(restaurantId)")
        
        let snapshot = try await db
            .collection("restaurants")
            .document(restaurantId)
            .collection("tables")
            .getDocuments()
        
        let tables = try snapshot.documents.compactMap { document -> TableModel? in
            var data = document.data()
            data["id"] = document.documentID
            
            let jsonData = try JSONSerialization.data(withJSONObject: data)
            return try JSONDecoder().decode(TableModel.self, from: jsonData)
        }
        
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–æ–ª–∏–∫–æ–≤: \(tables.count)")
        return tables
    }
    
    // MARK: - Create Table
    func createTable(_ table: TableModel, for restaurantId: String) async throws -> TableModel {
        print("‚ûï –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–∏–∫: \(table.name)")
        
        var tableData = table
        tableData.position = nil // –£–±–∏—Ä–∞–µ–º position –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        
        let jsonData = try JSONEncoder().encode(tableData)
        var data = try JSONSerialization.jsonObject(with: jsonData) as? [String: Any] ?? [:]
        
        // –£–±–∏—Ä–∞–µ–º id, —á—Ç–æ–±—ã Firestore —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        data.removeValue(forKey: "id")
        
        // –î–æ–±–∞–≤–ª—è–µ–º timestamp
        data["createdAt"] = FieldValue.serverTimestamp()
        data["updatedAt"] = FieldValue.serverTimestamp()
        
        let documentRef = try await db
            .collection("restaurants")
            .document(restaurantId)
            .collection("tables")
            .addDocument(data: data)
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ–ª–∏–∫ —Å –Ω–æ–≤—ã–º ID
        var createdTable = tableData
        createdTable.id = documentRef.documentID
        
        print("‚úÖ –°—Ç–æ–ª–∏–∫ —Å–æ–∑–¥–∞–Ω —Å ID: \(documentRef.documentID)")
        return createdTable
    }
    
    // MARK: - Update Table
    func updateTable(_ table: TableModel, for restaurantId: String) async throws {
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–∏–∫: \(table.name)")
        
        let jsonData = try JSONEncoder().encode(table)
        var data = try JSONSerialization.jsonObject(with: jsonData) as? [String: Any] ?? [:]
        
        // –£–±–∏—Ä–∞–µ–º id –∏ –¥–æ–±–∞–≤–ª—è–µ–º timestamp
        data.removeValue(forKey: "id")
        data["updatedAt"] = FieldValue.serverTimestamp()
        
        try await db
            .collection("restaurants")
            .document(restaurantId)
            .collection("tables")
            .document(table.id)
            .updateData(data)
        
        print("‚úÖ –°—Ç–æ–ª–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - Delete Table
    func deleteTable(_ table: TableModel, for restaurantId: String) async throws {
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–∏–∫: \(table.name)")
        
        try await db
            .collection("restaurants")
            .document(restaurantId)
            .collection("tables")
            .document(table.id)
            .delete()
        
        print("‚úÖ –°—Ç–æ–ª–∏–∫ —É–¥–∞–ª–µ–Ω")
    }
    
    // MARK: - Update Table Status
    func updateTableStatus(_ tableId: String, status: TableModel.TableStatusType, for restaurantId: String) async throws {
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∏–∫–∞ \(tableId) –Ω–∞ \(status.displayName)")
        
        try await db
            .collection("restaurants")
            .document(restaurantId)
            .collection("tables")
            .document(tableId)
            .updateData([
                "status": status.rawValue,
                "updatedAt": FieldValue.serverTimestamp()
            ])
        
        print("‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç–æ–ª–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    // MARK: - Real-time Observations
    func observeTables(for restaurantId: String) -> AnyPublisher<[TableModel], Error> {
        print("üëÄ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å—Ç–æ–ª–∏–∫–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: \(restaurantId)")
        
        return Future<[TableModel], Error> { promise in
            let listener = self.db
                .collection("restaurants")
                .document(restaurantId)
                .collection("tables")
                .order(by: "createdAt")
                .addSnapshotListener { snapshot, error in
                    if let error = error {
                        print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å—Ç–æ–ª–∏–∫–∞–º–∏: \(error)")
                        promise(.failure(error))
                        return
                    }
                    
                    guard let documents = snapshot?.documents else {
                        promise(.success([]))
                        return
                    }
                    
                    do {
                        let tables = try documents.compactMap { document -> TableModel? in
                            var data = document.data()
                            data["id"] = document.documentID
                            
                            let jsonData = try JSONSerialization.data(withJSONObject: data)
                            return try JSONDecoder().decode(TableModel.self, from: jsonData)
                        }
                        
                        print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–æ–ª–∏–∫–æ–≤: \(tables.count)")
                        promise(.success(tables))
                    } catch {
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–æ–ª–∏–∫–æ–≤: \(error)")
                        promise(.failure(error))
                    }
                }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º listener –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
            self.listeners[restaurantId] = listener
        }
        .eraseToAnyPublisher()
    }
    
    // MARK: - Cleanup
    func stopObserving(restaurantId: String) {
        listeners[restaurantId]?.remove()
        listeners.removeValue(forKey: restaurantId)
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å—Ç–æ–ª–∏–∫–∞–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: \(restaurantId)")
    }
    
    deinit {
        listeners.values.forEach { $0.remove() }
        print("üßπ TablesService –æ—á–∏—â–µ–Ω")
    }
}

// MARK: - Mock Service for Development
class MockTablesService: TablesServiceProtocol {
    private var mockTables: [TableModel] = []
    private let subject = PassthroughSubject<[TableModel], Error>()
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        mockTables = [
            TableModel(id: "1", name: "–°—Ç–æ–ª 1", capacity: 2, type: .indoor, status: .available, isVIP: false),
            TableModel(id: "2", name: "–°—Ç–æ–ª 2", capacity: 4, type: .indoor, status: .occupied, isVIP: false),
            TableModel(id: "3", name: "VIP-1", capacity: 6, type: .vip, status: .reserved, isVIP: true),
            TableModel(id: "4", name: "–¢–µ—Ä—Ä–∞—Å–∞ 1", capacity: 4, type: .outdoor, status: .available, isVIP: false),
            TableModel(id: "5", name: "–ë–∞—Ä 1", capacity: 2, type: .bar, status: .cleaning, isVIP: false),
            TableModel(id: "6", name: "–°—Ç–æ–ª 3", capacity: 8, type: .indoor, status: .available, isVIP: false),
        ]
    }
    
    func fetchTables(for restaurantId: String) async throws -> [TableModel] {
        try await Task.sleep(nanoseconds: 500_000_000) // –≠–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        return mockTables
    }
    
    func createTable(_ table: TableModel, for restaurantId: String) async throws -> TableModel {
        try await Task.sleep(nanoseconds: 300_000_000)
        
        var newTable = table
        newTable.id = UUID().uuidString
        mockTables.append(newTable)
        
        subject.send(mockTables)
        return newTable
    }
    
    func updateTable(_ table: TableModel, for restaurantId: String) async throws {
        try await Task.sleep(nanoseconds: 300_000_000)
        
        if let index = mockTables.firstIndex(where: { $0.id == table.id }) {
            mockTables[index] = table
            subject.send(mockTables)
        }
    }
    
    func deleteTable(_ table: TableModel, for restaurantId: String) async throws {
        try await Task.sleep(nanoseconds: 300_000_000)
        
        mockTables.removeAll { $0.id == table.id }
        subject.send(mockTables)
    }
    
    func updateTableStatus(_ tableId: String, status: TableModel.TableStatusType, for restaurantId: String) async throws {
        try await Task.sleep(nanoseconds: 200_000_000)
        
        if let index = mockTables.firstIndex(where: { $0.id == tableId }) {
            mockTables[index].status = status
            subject.send(mockTables)
        }
    }
    
    func observeTables(for restaurantId: String) -> AnyPublisher<[TableModel], Error> {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.subject.send(self.mockTables)
        }
        
        return subject.eraseToAnyPublisher()
    }
}
