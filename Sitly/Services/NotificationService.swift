//
//  NotificationService.swift
//  Sitly
//
//  Created by AI Assistant on 14.09.2025.
//

import Foundation
import UserNotifications
import Combine

// MARK: - Notification Types
enum AppNotificationType: String, CaseIterable {
    case newBooking = "new_booking"
    case bookingConfirmed = "booking_confirmed"
    case bookingCancelled = "booking_cancelled"
    case tableReserved = "table_reserved"
    case reviewReceived = "review_received"
    case aiRecommendation = "ai_recommendation"
    
    var title: String {
        switch self {
        case .newBooking:
            return "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üéâ"
        case .bookingConfirmed:
            return "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ"
        case .bookingCancelled:
            return "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå"
        case .tableReserved:
            return "–°—Ç–æ–ª–∏–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω ü™ë"
        case .reviewReceived:
            return "–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤! ‚≠ê"
        case .aiRecommendation:
            return "AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ü§ñ"
        }
    }
    
    var sound: UNNotificationSound {
        switch self {
        case .newBooking, .reviewReceived:
            return .default
        case .bookingConfirmed, .tableReserved:
            return .default
        case .bookingCancelled:
            return .default
        case .aiRecommendation:
            return .default
        }
    }
}

// MARK: - Notification Data
struct NotificationData {
    let type: AppNotificationType
    let title: String
    let body: String
    let data: [String: Any]
    let scheduledTime: Date?
    
    init(type: AppNotificationType, title: String? = nil, body: String, data: [String: Any] = [:], scheduledTime: Date? = nil) {
        self.type = type
        self.title = title ?? type.title
        self.body = body
        self.data = data
        self.scheduledTime = scheduledTime
    }
}

// MARK: - Notification Service Protocol
protocol NotificationServiceProtocol {
    func requestPermission() async -> Bool
    func sendNotification(_ notification: NotificationData)
    func scheduleNotification(_ notification: NotificationData)
    func cancelNotification(withId id: String)
    func cancelAllNotifications()
    func getPendingNotifications() async -> [UNNotificationRequest]
}

// MARK: - Notification Service Implementation
class NotificationService: NSObject, NotificationServiceProtocol, ObservableObject {
    static let shared = NotificationService()
    
    @Published var isAuthorized = false
    @Published var pendingNotifications: [UNNotificationRequest] = []
    
    private let center = UNUserNotificationCenter.current()
    private var cancellables = Set<AnyCancellable>()
    
    override init() {
        super.init()
        center.delegate = self
        checkAuthorizationStatus()
    }
    
    // MARK: - Permission Management
    func requestPermission() async -> Bool {
        do {
            let granted = try await center.requestAuthorization(options: [.alert, .badge, .sound])
            await MainActor.run {
                self.isAuthorized = granted
            }
            return granted
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: \(error)")
            return false
        }
    }
    
    private func checkAuthorizationStatus() {
        center.getNotificationSettings { settings in
            DispatchQueue.main.async {
                self.isAuthorized = settings.authorizationStatus == .authorized
            }
        }
    }
    
    // MARK: - Send Notifications
    func sendNotification(_ notification: NotificationData) {
        guard isAuthorized else {
            print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = notification.title
        content.body = notification.body
        content.sound = notification.type.sound
        content.userInfo = notification.data
        
        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: nil
        )
        
        center.add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \(notification.title)")
            }
        }
    }
    
    func scheduleNotification(_ notification: NotificationData) {
        guard isAuthorized else {
            print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã")
            return
        }
        
        let content = UNMutableNotificationContent()
        content.title = notification.title
        content.body = notification.body
        content.sound = notification.type.sound
        content.userInfo = notification.data
        
        let trigger: UNNotificationTrigger
        if let scheduledTime = notification.scheduledTime {
            let timeInterval = scheduledTime.timeIntervalSinceNow
            if timeInterval > 0 {
                trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)
            } else {
                trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
            }
        } else {
            trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)
        }
        
        let request = UNNotificationRequest(
            identifier: UUID().uuidString,
            content: content,
            trigger: trigger
        )
        
        center.add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: \(notification.title)")
            }
        }
    }
    
    // MARK: - Cancel Notifications
    func cancelNotification(withId id: String) {
        center.removePendingNotificationRequests(withIdentifiers: [id])
        center.removeDeliveredNotifications(withIdentifiers: [id])
    }
    
    func cancelAllNotifications() {
        center.removeAllPendingNotificationRequests()
        center.removeAllDeliveredNotifications()
    }
    
    // MARK: - Get Pending Notifications
    func getPendingNotifications() async -> [UNNotificationRequest] {
        return await center.pendingNotificationRequests()
    }
    
    // MARK: - Convenience Methods
    func sendNewBookingNotification(booking: Booking) {
        let notification = NotificationData(
            type: .newBooking,
            body: "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ \(booking.timeSlot) –¥–ª—è \(booking.guests) –≥–æ—Å—Ç–µ–π",
            data: [
                "bookingId": booking.id,
                "restaurantId": booking.restaurantId,
                "guests": booking.guests,
                "timeSlot": booking.timeSlot
            ]
        )
        sendNotification(notification)
    }
    
    func sendBookingConfirmedNotification(booking: Booking) {
        let notification = NotificationData(
            type: .bookingConfirmed,
            body: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –Ω–∞ \(booking.timeSlot)",
            data: [
                "bookingId": booking.id,
                "restaurantId": booking.restaurantId
            ]
        )
        sendNotification(notification)
    }
    
    func sendBookingCancelledNotification(booking: Booking) {
        let notification = NotificationData(
            type: .bookingCancelled,
            body: "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞ \(booking.timeSlot)",
            data: [
                "bookingId": booking.id,
                "restaurantId": booking.restaurantId
            ]
        )
        sendNotification(notification)
    }
    
    func sendAIRecommendationNotification(recommendation: String) {
        let notification = NotificationData(
            type: .aiRecommendation,
            body: recommendation,
            data: [
                "type": "ai_recommendation"
            ]
        )
        sendNotification(notification)
    }
}

// MARK: - UNUserNotificationCenterDelegate
extension NotificationService: UNUserNotificationCenterDelegate {
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
        completionHandler([.alert, .badge, .sound])
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        let userInfo = response.notification.request.content.userInfo
        
        if let bookingId = userInfo["bookingId"] as? String {
            print("üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: \(bookingId)")
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        
        completionHandler()
    }
}

// MARK: - Mock Notification Service
class MockNotificationService: NotificationServiceProtocol {
    func requestPermission() async -> Bool {
        print("üé≠ Mock: –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return true
    }
    
    func sendNotification(_ notification: NotificationData) {
        print("üé≠ Mock: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - \(notification.title): \(notification.body)")
    }
    
    func scheduleNotification(_ notification: NotificationData) {
        print("üé≠ Mock: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - \(notification.title): \(notification.body)")
    }
    
    func cancelNotification(withId id: String) {
        print("üé≠ Mock: –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å ID: \(id)")
    }
    
    func cancelAllNotifications() {
        print("üé≠ Mock: –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    }
    
    func getPendingNotifications() async -> [UNNotificationRequest] {
        print("üé≠ Mock: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return []
    }
}
