import Foundation
import CoreLocation

final class LocationService: NSObject, LocationServiceProtocol {
    private let locationManager = CLLocationManager()
    private var locationContinuation: CheckedContinuation<CLLocationCoordinate2D, Never>?
    
    override init() {
        super.init()
        setupLocationManager()
    }
    
    // MARK: - LocationServiceProtocol
    
    func getCurrentLocation() async throws -> CLLocationCoordinate2D {
        return await withCheckedContinuation { continuation in
            self.locationContinuation = continuation
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            switch locationManager.authorizationStatus {
            case .authorizedWhenInUse, .authorizedAlways:
                // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                locationManager.requestLocation()
            case .denied, .restricted:
                continuation.resume(returning: CLLocationCoordinate2D(latitude: 55.7558, longitude: 37.6176))
            case .notDetermined:
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                locationManager.requestWhenInUseAuthorization()
                // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è MVP
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    continuation.resume(returning: CLLocationCoordinate2D(latitude: 55.7558, longitude: 37.6176))
                }
            @unknown default:
                continuation.resume(returning: CLLocationCoordinate2D(latitude: 55.7558, longitude: 37.6176))
            }
        }
    }
    
    func requestLocationPermission() async -> Bool {
        return await withCheckedContinuation { continuation in
            switch locationManager.authorizationStatus {
            case .authorizedWhenInUse, .authorizedAlways:
                continuation.resume(returning: true)
            case .denied, .restricted:
                continuation.resume(returning: false)
            case .notDetermined:
                locationManager.requestWhenInUseAuthorization()
                // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è MVP
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    continuation.resume(returning: true)
                }
            @unknown default:
                continuation.resume(returning: false)
            }
        }
    }
    
    func startLocationUpdates() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        print("üìç LocationService: Started location updates")
    }
    
    func stopLocationUpdates() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Å—Ç–∞–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        print("üìç LocationService: Stopped location updates")
    }
    
    // MARK: - Private Methods
    
    private func setupLocationManager() {
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.distanceFilter = 10 // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–µ—Ç—Ä–æ–≤
    }
}

// MARK: - CLLocationManagerDelegate

extension LocationService: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.last else { return }
        
        locationContinuation?.resume(returning: location.coordinate)
        locationContinuation = nil
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        // –î–ª—è MVP –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        locationContinuation?.resume(returning: CLLocationCoordinate2D(latitude: 55.7558, longitude: 37.6176))
        locationContinuation = nil
    }
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
        case .authorizedWhenInUse, .authorizedAlways:
            print("üìç LocationService: Location permission granted")
        case .denied, .restricted:
            print("üìç LocationService: Location permission denied")
        case .notDetermined:
            print("üìç LocationService: Location permission not determined")
        @unknown default:
            print("üìç LocationService: Unknown authorization status")
        }
    }
}

// MARK: - Location Error

enum LocationError: LocalizedError {
    case permissionDenied
    case locationError(Error)
    case unknown
    
    var errorDescription: String? {
        switch self {
        case .permissionDenied:
            return "–î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω"
        case .locationError(let error):
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: \(error.localizedDescription)"
        case .unknown:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
        }
    }
}
