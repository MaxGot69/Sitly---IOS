//
//  ImageStorageService.swift
//  Sitly
//
//  Created by AI Assistant on 14.09.2025.
//

import Foundation
import UIKit
import Combine

// MARK: - Image Storage Service Protocol
protocol ImageStorageServiceProtocol {
    func uploadImage(_ image: UIImage, path: String) async throws -> String
    func downloadImage(from url: String) async throws -> UIImage
    func deleteImage(at path: String) async throws
    func getImageURL(for path: String) async throws -> String
    func uploadRestaurantPhoto(_ image: UIImage, restaurantId: String, photoType: RestaurantPhotoType) async throws -> String
}

// MARK: - Image Storage Service Implementation
class ImageStorageService: ImageStorageServiceProtocol {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º Firebase Storage
    
    // MARK: - Upload Image
    func uploadImage(_ image: UIImage, path: String) async throws -> String {
        print("üì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ: \(path)")
        
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock URL, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º Firebase Storage
        let mockURL = "https://mock-storage.com/\(path)"
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: \(mockURL)")
        return mockURL
    }
    
    // MARK: - Download Image
    func downloadImage(from url: String) async throws -> UIImage {
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(url)")
        
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        return UIImage(systemName: "photo") ?? UIImage()
    }
    
    // MARK: - Delete Image
    func deleteImage(at path: String) async throws {
        print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(path)")
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    }
    
    // MARK: - Get Image URL
    func getImageURL(for path: String) async throws -> String {
        print("üîó –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(path)")
        let mockURL = "https://mock-storage.com/\(path)"
        print("‚úÖ URL –ø–æ–ª—É—á–µ–Ω: \(mockURL)")
        return mockURL
    }
    
    // MARK: - Convenience Methods
    func uploadRestaurantPhoto(_ image: UIImage, restaurantId: String, photoType: RestaurantPhotoType) async throws -> String {
        let timestamp = Int(Date().timeIntervalSince1970)
        let path = "restaurants/\(restaurantId)/photos/\(photoType.rawValue)_\(timestamp).jpg"
        return try await uploadImage(image, path: path)
    }
    
    func uploadRestaurantMenuPhoto(_ image: UIImage, restaurantId: String, dishName: String) async throws -> String {
        let timestamp = Int(Date().timeIntervalSince1970)
        let sanitizedDishName = dishName.replacingOccurrences(of: " ", with: "_")
        let path = "restaurants/\(restaurantId)/menu/\(sanitizedDishName)_\(timestamp).jpg"
        return try await uploadImage(image, path: path)
    }
}

// MARK: - Restaurant Photo Types
enum RestaurantPhotoType: String, CaseIterable {
    case main = "main"
    case interior = "interior"
    case exterior = "exterior"
    case food = "food"
    case atmosphere = "atmosphere"
    
    var displayName: String {
        switch self {
        case .main: return "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"
        case .interior: return "–ò–Ω—Ç–µ—Ä—å–µ—Ä"
        case .exterior: return "–≠–∫—Å—Ç–µ—Ä—å–µ—Ä"
        case .food: return "–ï–¥–∞"
        case .atmosphere: return "–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞"
        }
    }
}

// MARK: - Image Storage Errors
enum ImageStorageError: Error, LocalizedError {
    case invalidImageData
    case invalidURL
    case uploadFailed(String)
    case downloadFailed(String)
    case deleteFailed(String)
    case urlGenerationFailed(String)
    
    var errorDescription: String? {
        switch self {
        case .invalidImageData:
            return "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
        case .uploadFailed(let message):
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(message)"
        case .downloadFailed(let message):
            return "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: \(message)"
        case .deleteFailed(let message):
            return "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: \(message)"
        case .urlGenerationFailed(let message):
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: \(message)"
        }
    }
}

// MARK: - Mock Image Storage Service
class MockImageStorageService: ImageStorageServiceProtocol {
    func uploadImage(_ image: UIImage, path: String) async throws -> String {
        print("üé≠ Mock: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(path)")
        return "https://mock-storage.com/\(path)"
    }
    
    func downloadImage(from url: String) async throws -> UIImage {
        print("üé≠ Mock: –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(url)")
        return UIImage(systemName: "photo") ?? UIImage()
    }
    
    func deleteImage(at path: String) async throws {
        print("üé≠ Mock: –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: \(path)")
    }
    
    func getImageURL(for path: String) async throws -> String {
        print("üé≠ Mock: –ü–æ–ª—É—á–∞–µ–º URL: \(path)")
        return "https://mock-storage.com/\(path)"
    }
    
    func uploadRestaurantPhoto(_ image: UIImage, restaurantId: String, photoType: RestaurantPhotoType) async throws -> String {
        print("üé≠ Mock: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: \(photoType.displayName)")
        return "https://mock-storage.com/restaurants/\(restaurantId)/\(photoType.rawValue).jpg"
    }
}
