//
//  AIService.swift
//  Sitly
//
//  Created by Maxim Gotovchenko on 14.09.2025.
//

import Foundation
import FirebaseAI

// MARK: - AI Service Protocol
protocol AIServiceProtocol {
    func generateResponse(prompt: String) async throws -> String
    func generateRestaurantRecommendations(userPreferences: String) async throws -> String
    func generateMenuRecommendations(restaurantType: String) async throws -> String
    func analyzeReview(reviewText: String) async throws -> String
    func generateBookingConfirmation(bookingDetails: String) async throws -> String
    func predictCancellation(bookingData: String) async throws -> String
    func optimizeTableAllocation(bookings: String) async throws -> String
    func getPersonalizedRecommendations(for user: User, preferences: UserPreferences) async throws -> String
}

// MARK: - AI Service Implementation
class AIService: AIServiceProtocol {
    private let ai: FirebaseAI
    private let model: GenerativeModel
    
    init() {
        print("ü§ñ AIService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Gemini")
        self.ai = FirebaseAI.firebaseAI(backend: .googleAI())
        self.model = ai.generativeModel(modelName: "gemini-2.5-flash")
        print("‚úÖ AIService: Gemini –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    }
    
    // MARK: - Main Response Generation
    func generateResponse(prompt: String) async throws -> String {
        print("ü§ñ AIService: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è: \(prompt)")
        
        do {
            let response = try await model.generateContent(prompt)
            let result = response.text ?? "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
            print("‚úÖ AIService: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return result
        } catch {
            print("‚ùå AIService: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(error)")
            throw AIServiceError.generationFailed(error.localizedDescription)
        }
    }
    
    // MARK: - Restaurant Recommendations
    func generateRestaurantRecommendations(userPreferences: String) async throws -> String {
        let prompt = """
        –ö–∞–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "\(userPreferences)".
        
        –í–∫–ª—é—á–∏—Ç–µ:
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –±–ª—é–¥–∞
        - –ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è
        - –û—Å–æ–±—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –°–æ–≤–µ—Ç—ã –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Menu Recommendations
    func generateMenuRecommendations(restaurantType: String) async throws -> String {
        let prompt = """
        –ö–∞–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é –¥–ª—è \(restaurantType) —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
        
        –í–∫–ª—é—á–∏—Ç–µ:
        - –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–ª—é–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        - –°–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        - –°–æ—á–µ—Ç–∞–Ω–∏—è –±–ª—é–¥ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤
        - –°–æ–≤–µ—Ç—ã –ø–æ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Review Analysis
    func analyzeReview(reviewText: String) async throws -> String {
        let prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: "\(reviewText)"
        
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
        - –û–±—â–∏–π —Ç–æ–Ω –æ—Ç–∑—ã–≤–∞ (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
        - –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã (–µ–¥–∞, —Å–µ—Ä–≤–∏—Å, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Ü–µ–Ω–∞)
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Booking Confirmation
    func generateBookingConfirmation(bookingDetails: String) async throws -> String {
        let prompt = """
        –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª–µ–π: "\(bookingDetails)"
        
        –í–∫–ª—é—á–∏—Ç–µ:
        - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        - –ü–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥–æ—Å—Ç—è
        - –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Cancellation Prediction
    func predictCancellation(bookingData: String) async throws -> String {
        let prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö: "\(bookingData)"
        
        –û—Ü–µ–Ω–∏—Ç–µ:
        - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)
        - –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –æ—Ç–º–µ–Ω—ã
        - –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–º —Ç–æ–Ω–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Table Allocation Optimization
    func optimizeTableAllocation(bookings: String) async throws -> String {
        let prompt = """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: "\(bookings)"
        
        –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ:
        - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤
        - –£—á–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≥–æ—Å—Ç–µ–π
        - –ú–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        - –†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
    
    // MARK: - Personalized Recommendations
    func getPersonalizedRecommendations(for user: User, preferences: UserPreferences) async throws -> String {
        let prompt = """
        –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(user.name).
        
        –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: \(preferences)
        
        –í–∫–ª—é—á–∏—Ç–µ:
        - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
        - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        - –û—Å–æ–±—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –°–æ–≤–µ—Ç—ã –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ.
        """
        
        return try await generateResponse(prompt: prompt)
    }
}

// MARK: - AI Service Error
enum AIServiceError: Error, LocalizedError {
    case generationFailed(String)
    case invalidPrompt
    case networkError
    case quotaExceeded
    
    var errorDescription: String? {
        switch self {
        case .generationFailed(let message):
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: \(message)"
        case .invalidPrompt:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
        case .networkError:
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"
        case .quotaExceeded:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"
        }
    }
}

// MARK: - AI Models
struct CancellationPrediction {
    let probability: Double
    let riskFactors: [String]
    let recommendations: [String]
}

struct TableAllocation {
    let tableId: String
    let guestId: String
    let timeSlot: String
    let priority: Int
}

// MARK: - Sentiment Analysis
enum SentimentType: String, CaseIterable {
    case positive = "positive"
    case negative = "negative"
    case neutral = "neutral"
    
    var displayName: String {
        switch self {
        case .positive: return "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
        case .negative: return "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
        case .neutral: return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        }
    }
}

// MARK: - Chat Context
struct ChatContext {
    let currentRestaurant: Restaurant?
    let userPreferences: [String: Any]?
    let preferences: [String: Any]?
}

// MARK: - AI Service Protocol Extension
extension AIServiceProtocol {
    func chatWithAssistant(message: String, context: ChatContext) async throws -> String {
        let prompt = """
        –ö–∞–∫ AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: "\(message)"
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç:
        - –†–µ—Å—Ç–æ—Ä–∞–Ω: \(context.currentRestaurant?.name ?? "–ù–µ —É–∫–∞–∑–∞–Ω")
        - –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(context.userPreferences?.description ?? "–ù–µ —É–∫–∞–∑–∞–Ω—ã")
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ, –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.
        """
        
        return try await generateResponse(prompt: prompt)
    }
}